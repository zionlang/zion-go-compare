# An implementation of Conway's Game of Life.
# Stolen shamelessly from https://golang.org/ in order to
# see how hard it would be to port to Zion.
module conway

# Field represents a two-dimensional field of cells.
type Field has {
    s [[bool]]
    w int
    h int
}

# NewField returns an empty field of the specified width and height.
fn NewField(w int, h int) Field {
    # TODO: make array allocation better. It was painful
    # to have to remove Go's `make` construct, and to
    # manually initialize this 2-d array.
    let s [[bool]]
    reserve(s, h)
    for y in range(h) {
        let row [bool]
        reserve(row, w)
        for x in range(w) {
            append(row, false)
        }
        append(s, row)
    }
    return Field(s, w, h)
}

# Set sets the state of the specified cell to the given value.
fn Set(f Field, x int, y int, b bool) {
    f.s[y][x] = b
}

# Alive reports whether the specified cell is alive.
# If the x or y coordinates are outside the field boundaries they are wrapped
# toroidally. For instance, an x value of -1 is treated as width-1.
fn Alive(f Field, x int, y int) bool {
    x += f.w
    # TODO: implement mod_assignment_t::render
    x = x % f.w
    y += f.h
    y = y % f.h
    return f.s[y][x]
}

# Next returns the state of the specified cell at the next time step.
fn Next(f Field, x int, y int) bool {
    # Count the adjacent cells that are alive.
    var alive = 0
    for i in range(-1, 2) {
        for j in range(-1, 2) {
            if (j != 0 or i != 0) and Alive(f, x+i, y+j) {
                alive += 1
            }
        }
    }
    # Return next state according to the game rules:
    #   exactly 3 neighbors: on,
    #   exactly 2 neighbors: maintain current state,
    #   otherwise: off.
    return alive == 3 or alive == 2 and Alive(f, x, y)
}

# Life stores the state of a round of Conway's Game of Life.
type Life has {
    var a Field
    var b Field
    w int
    h int
}

# NewLife returns a new Life game state with a random initial state.
fn NewLife(w int, h int) Life {
    a := NewField(w, h)
    for i in range(w * h / 4) {
        Set(a, rand(w), rand(h), true)
    }
    return Life(a, NewField(w, h), w, h)
}

# Step advances the game by one instant, recomputing and updating all cells.
fn Step(l Life) {
    # Update the state of the next field (b) from the current field (a).
    for y in range(l.h) {
        for x in range(l.w) {
            Set(l.b, x, y, Next(l.a, x, y))
        }
    }
    # Swap fields a and b.
    c := l.a
    l.a = l.b
    l.b = c
}

# String returns the game board as a str.
[global]
fn str(l Life) str {
    # TODO: make a better string builder type thing
    var buf str
    for y in range(l.h) {
        for x in range(l.w) {
            if Alive(l.a, x, y) {
                buf += "*"
            } else {
                buf += " "
            }
        }
        buf += "\n"
    }
    return buf
}

fn main() {
    l := NewLife(40, 15)
    for i in range(300) {
        Step(l)
        print("\x0c")
        print(l)
        posix.sleep(1)
    }
}
